/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package encrypting_data;

import java.io.*;
import java.security.*;
import java.util.*;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author john
 */
public class Signup_Login_Page extends javax.swing.JFrame implements Serializable {  
    //string variables, declare the delimiter as semicolon
    private String userName, firstName, lastName, passWord, cellPhone, eMail, fromFile, delimit = ";";
    //store the user information from file into an array
    private String fields[];
    //declare boolean variables to monitor each step in the sign up and log in process
    private boolean register0, userExist, register2, register3, pwCheck;
    //represent the position of the found user in the array
    private int userPosition; 
    private UserInformation user1, user2;  
    /**
     * Creates new form NewJFrame
     */
    public Signup_Login_Page() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        textField1 = new java.awt.TextField();
        textField2 = new java.awt.TextField();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        textField3 = new java.awt.TextField();
        label3 = new java.awt.Label();
        textField4 = new java.awt.TextField();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        textField5 = new java.awt.TextField();
        label6 = new java.awt.Label();
        textField6 = new java.awt.TextField();
        jButton2 = new javax.swing.JButton();
        label8 = new java.awt.Label();
        textField7 = new java.awt.TextField();
        label9 = new java.awt.Label();
        textField8 = new java.awt.TextField();
        passwordCriteria1 = new encrypting_data.PasswordCriteria();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("sign up");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        label1.setText("User name");

        label2.setText("Password");

        label3.setText("First name");

        label4.setText("Last name");

        label5.setText("User name");

        label6.setText("Password");

        jButton2.setText("log in");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        label8.setText("Phone#");

        label9.setText("Email");

        javax.swing.GroupLayout passwordCriteria1Layout = new javax.swing.GroupLayout(passwordCriteria1);
        passwordCriteria1.setLayout(passwordCriteria1Layout);
        passwordCriteria1Layout.setHorizontalGroup(
            passwordCriteria1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );
        passwordCriteria1Layout.setVerticalGroup(
            passwordCriteria1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(textField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(textField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textField2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(25, 25, 25)
                            .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textField8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textField7, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(102, 102, 102))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jButton2)
                                    .addGap(53, 53, 53)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(textField6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(25, 25, 25)
                                    .addComponent(textField5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(139, 139, 139))
                    .addComponent(passwordCriteria1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addComponent(jButton2)
                        .addGap(55, 55, 55)
                        .addComponent(passwordCriteria1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //declare UserInformation class to hold information of the user, get user infor from the fields
        user1 = new UserInformation (textField1.getText(), textField2.getText(), textField3.getText(), textField4.getText(), textField7.getText(), textField8.getText());  
        userName = user1.getUserName();
        passWord = user1.getPassWord();
        firstName = user1.getFirstName();
        lastName = user1.getLastName();
        cellPhone = user1.getCellPhone();
        eMail = user1.getEMail();
        //make sure not empyt
        checkEmpty();
        try {
            //check username and ensure the user doesn't exist    
            if (register0){
                checkUsername();   
            if (userExist)
                JOptionPane.showMessageDialog(this,"Sorry, the user already exist.","Warning",JOptionPane.WARNING_MESSAGE);
            //check password, ensure it's not a bad one
            else if (!userExist)
                checkBadPassword();
            //enforce additional password control
            if (register2){
                checkPasswordAdditional();
            }
            }
            //check the username again, the duplication of username is prior to the password error
            checkUsername();
            //check if there are empty fields again, the empty space of fields is prior to the duplication of username error
            checkEmpty();
            //if all informations are in good condition, then encrypt the password and store the information in the file        
            if ((!userExist) && register2  && register3){         
                storeInform(); 
            }
        } 
	catch(Exception e){
            e.printStackTrace();
	}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        user2 = new UserInformation(textField5.getText(), textField6.getText()); 
        userName = user2.getUserName();
        passWord = user2.getPassWord();
        //check there are empty spaces in the text fields
        checkEmptyLogin();
        try {
            //if there is no empty fields
            if (register0)
                login();
        } 
        catch(Exception e){
            e.printStackTrace();
	}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void storeInform(){
        
    try {       
            //load the user inform file
            File f = new File("user inform.txt");
            PrintWriter pw = new PrintWriter(new FileWriter(f, true));
            //write the satisfied user information to the file
            pw.println(userName+delimit+encryption()+delimit+firstName+delimit+lastName+delimit+cellPhone+delimit+eMail+delimit);
            JOptionPane.showMessageDialog(this,"Registration succeed.");
            //close the file
            pw.close();
	}
	catch(Exception e){
            e.printStackTrace();
	}
    }
    
    private void checkEmpty(){
        //initialize the boolean as true
        register0 = true;
        //"or" condotion, if any of those is empty
        if (userName.isEmpty() || passWord.isEmpty() || firstName.isEmpty() || lastName.isEmpty()|| cellPhone.isEmpty()|| eMail.isEmpty()){
            JOptionPane.showMessageDialog(this,"Did you miss any information?","Warning",JOptionPane.WARNING_MESSAGE);
            register0 = false;
        }
    }
    
    private void checkEmptyLogin(){
        register0 = true;
        if (userName.isEmpty() || passWord.isEmpty()){
            JOptionPane.showMessageDialog(this,"Incomplete information.","Warning",JOptionPane.WARNING_MESSAGE);
            register0 = false;
        }
    }
        
    private void checkUsername(){
        //initialize & clear the string
        fromFile = "";
        try {
            //declare scanner and open file
            Scanner input = new Scanner(new FileReader("user inform.txt"));
            //store every line from the file into the string
            while(input.hasNext()){
		fromFile += input.nextLine();    
            }
            input.close();
	}
	catch(Exception e){
            e.printStackTrace();
	}
        //store the information into array
        fields = fromFile.split(delimit);
        //username check
        userExist = false;
        //username is always the first of each line, so add 6 each time
        for (int i = 0; i <fields.length; i+=6){
            //declare a string to hold the username
            String n = fields[i];
            if (userName.equals(n)){
                userExist = true;
                //remember the position of the user name
                userPosition = i;
            }
        }
    }
    
    private void checkBadPassword(){
        try {
            //open the dictbadpass file
            File f = new File("dictbadpass.txt");
            Scanner input = new Scanner(f);
            //check through each line to see if the entered password is not strong enough
            while(input.hasNext()){
                if (passWord.equals(input.nextLine())){
                    JOptionPane.showMessageDialog(this,"Sorry, the password is too weak.","Warning",JOptionPane.WARNING_MESSAGE);
                    register2 = false;
                    //once confirm its weakness, no need to go through the rest of the file
                    break;
                }
                else{
                    register2 = true;     
                }
            }
            input.close();
	}
	catch(Exception e){
            e.printStackTrace();
	}
    }
 
    private void checkPasswordAdditional(){
        //declare character, hold every single character of the password
        char ch;
        register3 = false;
        boolean length = false, lowerCase = false, upperCase = false, number = false, symbol = false, semicolon = false;
        if (passWord.length() < 6){
            JOptionPane.showMessageDialog(this,"The password is too short.","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else if (passWord.length() > 16){
            JOptionPane.showMessageDialog(this,"The password is too long.","Warning",JOptionPane.WARNING_MESSAGE);
        }
        else{
            //the length of the password matches the criteria
            length = true;
            for(int i = 0; i < passWord.length(); i++){
                //check through each character in the password
                ch = passWord.charAt(i);
                //if the password contains lowercase character
                if(ch >= 'a' && ch <= 'z'){
                    lowerCase = true;
                }
                //if the password contains uppercase character
                else if(ch >= 'A' && ch <= 'Z'){
                    upperCase = true;
                }
                //if the password contains number
                else if (ch >= '0' && ch <= '9'){
                    number = true;
                }
                //if the password contains symbol except for the delimit, semicolon
                else if (ch != ';'){
                    symbol = true;
                }
                ////if the password contains semicolon
                else{
                    semicolon = true;
                }
            }
        //prompt user what's missing
        if (!lowerCase)
            JOptionPane.showMessageDialog(this,"Password: Missing lowercase character.","Warning",JOptionPane.WARNING_MESSAGE);
        if (!upperCase)
            JOptionPane.showMessageDialog(this,"Password: Missing upperCase character.","Warning",JOptionPane.WARNING_MESSAGE);
        if (!number)
            JOptionPane.showMessageDialog(this,"Password: Missing number.","Warning",JOptionPane.WARNING_MESSAGE);
        if (!symbol)
            JOptionPane.showMessageDialog(this,"Password: Missing symbol.","Warning",JOptionPane.WARNING_MESSAGE);
        if (semicolon)
            JOptionPane.showMessageDialog(this,"You can't contain ';' in your password.","Warning",JOptionPane.WARNING_MESSAGE);
        }
        //if the password is perfect
        if (length && lowerCase && upperCase && number && symbol && (!semicolon)){
            register3 = true;
        }
        
    }
    
    private void login(){
        pwCheck = false;
        checkUsername();
        try{
            //check if the password is correct  
            //compare the entered password with the one stored in the file that is correspond to the username whose location is recorded in the checkUsername method
            if(encryption().equals(fields[userPosition+1])){
                pwCheck = true;
        }
        }
        catch(Exception e){
            e.printStackTrace();
	}
        //prompt the user information
        if (!userExist)
            JOptionPane.showMessageDialog(this,"User is not found.","Warning",JOptionPane.ERROR_MESSAGE);
        else if (!pwCheck){  
            JOptionPane.showMessageDialog(this,"Password incorrect.","Warning",JOptionPane.ERROR_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(this,"Login succeed.");
        }
    }
                
    private String encryption() throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        //give the helper function the password  
        md.update(passWord.getBytes());
        //perform the encryption
        byte byteData[] = md.digest(); 
        //To express the byte data as a hexadecimal number (the normal way)
        String encryptedPW="";
        for (int i = 0; i < byteData.length; i++) {
            encryptedPW += (Integer.toHexString((byteData[i] & 0xFF)|0x100).substring(1,3));
        }
        return encryptedPW;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Signup_Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Signup_Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Signup_Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Signup_Login_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold> 
        //</editor-fold>
        //</editor-fold> 
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Signup_Login_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private encrypting_data.PasswordCriteria passwordCriteria1;
    private java.awt.TextField textField1;
    private java.awt.TextField textField2;
    private java.awt.TextField textField3;
    private java.awt.TextField textField4;
    private java.awt.TextField textField5;
    private java.awt.TextField textField6;
    private java.awt.TextField textField7;
    private java.awt.TextField textField8;
    // End of variables declaration//GEN-END:variables
}
